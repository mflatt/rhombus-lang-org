#lang rhombus/static/and_meta
import:
  rhombus/rx open

export:
  write_html
  all_styles
  css

def mutable styles :: Map = {}

fun hyphenate(kw) :: String:
  rx'"_"'.replace_all(to_string(kw), "-")

fun pack_css_to(v :: List, o :: Port.Output, sep :: String):
  for ([attr, val] in v):
    o.print(sep ++ hyphenate(attr) ++ ": " ++ val ++ ";")

fun all_styles():
  let o = Port.Output.open_bytes()
  for ((k, v :: List) in styles):
    o.print("\n." ++ hyphenate(k) ++ "{")
    pack_css_to(v, o, "\n  ")
    o.print("\n}")
  o.get_string()

fun pack_css(v :: List):
  let o = Port.Output.open_bytes()
  pack_css_to(v, o, " ")
  o.get_string()

expr.macro 'css:
              $(kw :: Keyword): $rhs
              ...':
  'pack_css([[#' $kw, $rhs], ...])'

class Tagged(tag, style, kws :: Map, content :: List)

fun make_styled(tag, name = #false, spec = []):
  when name
  | styles := styles ++ { name: spec }
  fun (~& kws, content, ...):
    Tagged(tag, name, kws, [content, ...])

meta:
  fun parse_styled(proc, body):
    match body
    | '$(kw :: Keyword): $rhs
       ...
       $arg
       ...':
        '$proc($kw: $rhs, ..., $arg, ...)'

decl.macro 'def_tag $id':
  '«
     def tag = make_styled($(to_string(id)))
     expr.macro '$id: $('$')body': parse_styled('tag', body)
     export $id
   »'

def_tag div
def_tag span

def_tag html
def_tag head
def_tag meta
def_tag title
def_tag style
def_tag script
def_tag body

def_tag pre
def_tag img
def_tag a
def_tag br
def_tag b
def_tag i
def_tag li
def_tag ul
def_tag p

decl.macro 'def_ns $ns_id':
  '«     
     namespace $ns_id:
       export: rename defx as def
       defn.macro 'defx $('$')id:
                     $('$')(kw :: Keyword): $('$')val
                     $('...')':
         '«
            def proc = make_styled($(to_string(ns_id)),
                                   $('$')(to_string(id)),
                                   [[#' $('$')kw, $('$')val],
                                    $('...')])
            expr.macro '$('$')id: $('$')('$('$')')body':
              parse_styled('proc', body)
          »'
   »'

def_ns div
def_ns span
def_ns a

fun write_html(t :: Tagged):
  print("<" ++ t.tag)
  when t.style
  | print(" class=" ++ repr(hyphenate(t.style)))
  for ((kw, val) in t.kws):
    print(" " ++ hyphenate(kw) ++ "=" ++ repr(val))
  print(">")
  for (c in t.content):
    recur loop (c = c):
      match c
      | t :: Tagged:
          write_html(t)
      | [e, ...]:
          Function.pass(loop(e), ...)
      | ~else:
          print(to_string(c))
  print("</" ++ t.tag ++ ">")
  when t.tag == "div"
  | print("\n")


  